* Forms
** defun
*** DEfine FUNction, has multiple parts.
**** List Item 0: defun form.
**** List Item 1: function symbol.
**** List Item 2: List of arguments.
**** List Item 3: Documentation string.
**** List Item 4: If starts with "interactive" form, is interactivity definitions. (Optional)
**** List Item 5 on: Body of the function
** interactive
*** Defines the ways a method can be interactive with M-x. Should be used in a list with a second item that's a string defining some options:
**** "p" - Passes the 'P'refixing argument as the argument to the method.
**** "c" - Pass a 'C'haracter to the method.
**** "\n" - Used to separate the argument source characters.
**** Any characters following a source definition argument are used to prompt for the argument.
**** If none of the letter arguments are right, you can pass the method arguments as a list.
**** Complete list at: http://www.gnu.org/software/emacs/manual/html_node/elisp/Interactive-Codes.html
** let
*** Defines scope dynamically. Scope is not a lexical thing in lisp.
*** List Item 0: 'let' keyword/form.
*** List Item 1: A list of the variables that should be scoped within the form. Each entry is bound to 'nil' unless it's the first member of a two atom list. The first atom is bound to the value of the second atom.
*** List Item 3 on: Expressions.
** message
*** Essentially printf.
* Buffer & Point Manipulation
** buffer-name
*** Returns the current buffer's name.
** buffer-file-name
*** Returns the file name associated with the current buffer.
** current-buffer
*** Returns the current buffer.
** other-buffer
*** Returns the most recent other buffer.
** switch-to-buffer
*** Changes the buffer the current window is displaying.
** buffer-size
*** Returns a count of the number of characters in a buffer.
*** Defaults to evaluating the current buffer but others may be passed to it for evaluation.
** point
*** Returns the index of the point in the buffer.
