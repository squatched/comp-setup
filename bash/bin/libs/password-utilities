#!/usr/bin/env bash
# Source this file to be able to deal with the password var.

export password=""

THIS_SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
source ${THIS_SCRIPT_DIR}/io-utilities

function stdin_password() {
    cat <<EOF
${password}
EOF
}

function sudo_exec() {
    # On AL2012, long-form versions of sudo parameters aren't supported.
    # On Ubuntu 18, an empty custom prompt string is ignored. So to get around
    # completely suppressing the prompt, I'm getting creative. I'm giving it a
    # string with a space (x20) and a backspace (x08) to get a blank but
    # non-empty string to it.
    # -S (--stdin) - Take password input from stdin
    # -p (--prompt) - Specify a custom prompt
    stdin_password | sudo -S -p "$(printf '\x20\x08')" "$@"
}

function is_stdin_password_correct() {
    # -k (--reset-timestamp) - Invalidate cached sudo credentials.
    # -S (--stdin) - Take password input from stdin.
    # -p (--prompt) - Specify a custom prompt (workaround to force empty prompt)
    if stdin_password | sudo -k -S -p "$(printf '\x20\x08')" echo >/dev/null 2>&1; then
        return 0
    else
        return 1
    fi
}

function prompt_for_password() {
    local password_prompt=${1-"Enter your password: "}
    for ((retries=3; retries > 0; retries--)); do
        prompt_or_parse_for_input ${password_prompt}
        password="${INPUT}"; INPUT=

        password_prompt="Wrong password, try again: "
        if is_stdin_password_correct; then
            break
        else
            password=
        fi
    done

    if [[ -z ${password} ]]; then
        printf "Incorrect password entered too many times. Aborting.\n" >&2
        exit 3
    fi
}
