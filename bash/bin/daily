#!/bin/bash

getopt --test >/dev/null
if [[ ${?} -ne 4 ]]; then
    printf "Missing the right `getopt` version.\n"
    exit 1
fi

set -euo pipefail
IFS=$'\n\t'

THIS_SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
source ${THIS_SCRIPT_DIR}/libs/password-utilities

deobfuscate() {
    tr '[N-ZA-M]' '[A-Z]' <<<"${@}" | tr '[n-za-m]' '[a-z]'
}

# If you have multiple SSH certs you want added to your SSH agent, add
# them here separated by spaces.
SSH_CERTS=( \
    "${HOME}/.ssh/id_rsa" \
)

push_pop_close_string=''
pud () {
    local open_string="########## ${1^^} ##########"
    IFS=$' ' push_pop_close_string=$(printf '%.s#' $(eval echo {1..${#open_string}}))
    printf "${open_string}\n"
}

pod () {
    set +u; suffix=${1}; set -u
    printf "${push_pop_close_string}${suffix}"
    push_pop_close_string=''
}

show_help() {
    cat <<EOF
Usage: ${0##*/} [options]
Simplify a set of things I do every day.
  -h | --help   Display this help.
  -f | --force  Force auth to happen. (Does nothing this version of the script.)
  -v | --verbose    Turn up the auth check output verbosity. May be specified
                    more than once. (Max useful is 2x, any more are ignored.)
EOF
}

SHORT_OPTIONS="hfv"
LONG_OPTIONS="help,force,verbose"
PARSED_ARGS=$(getopt \
    --options="${SHORT_OPTIONS}" \
    --longoptions="${LONG_OPTIONS}" \
    --name="${0##*/}" \
    -- "$@")
if [[ ${?} -ne 0 ]]; then
    # Getopt has complained about invalid arguments.
    exit 2
fi

OPT_FORCE=""
OPT_VERBOSITY=()
eval set -- "${PARSED_ARGS}"
while [[ ${#} -gt 0 ]]; do
    case "${1}" in
        -f|--force)     OPT_FORCE=true;;
        -v|--verbose)   OPT_VERBOSITY+=("--verbose");;
        -h|--help)
            show_help
            exit 0
            ;;
        --)
            shift
            break
            ;;
        *)
            printf "Programming error... Go yell at Caleb.\n"
            exit 3
            ;;
    esac
    shift
done

# LOG_LEVEL is necessary for io libs but OPT_VERBOSITY can be passed
# on to commands that also take verbosity options.
LOG_LEVEL="${#OPT_VERBOSITY[@]}"

prompt_for_password
printf "\n"

# Echoing $password using EOF to avoid seeing it in a `ps` command output.
#pud "Renewing/Checking Authentication Credentials"
#stdin_password | check-auth ${OPT_FORCE/#true/--force} ${OPT_VERBOSITY[@]}
#pod "\n\n"

pud "Ensuring SSH Certs Are In Agent"
for cert in ${SSH_CERTS[@]}; do
    if ssh-add -l | awk '{print $3;}' | grep --quiet "${cert}"; then
        printf "Found cert: ${cert}\n"
    else
        ssh-add "${cert}"
    fi
done
pod "\n\n"

pud "Updating System Packages"
if hash apt-get 2>/dev/null; then
    sudo_exec apt-get --assume-yes update
    sudo_exec apt-get --assume-yes upgrade
fi
hash snap 2>/dev/null && sudo_exec snap refresh
hash rustup 2>/dev/null && rustup update
pod "\n\n"

pud "Updating Git Projects"
if [[ -d ${HOME}/Projects ]] && [[ -f ${HOME}/Projects/update.sh ]]; then
    pushd ~/Projects >/dev/null
    ./update.sh
    popd >/dev/null
fi
pod "\n\n"

pud "The internet is on fire"
dig +short txt istheinternetonfire.com
pod "\n\n"

printf "Completed: "
date
